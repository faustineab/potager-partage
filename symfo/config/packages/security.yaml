security:

    encoders:
        App\Entity\User:
            algorithm: bcrypt

    providers:
        in_memory: { memory: ~ }

        in_database:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        
        api_login:
            pattern:  ^/login
            stateless: true
            anonymous: true
            json_login:
                check_path: /login
                success_handler:          lexik_jwt_authentication.handler.authentication_success
                failure_handler:          lexik_jwt_authentication.handler.authentication_failure
                provider: in_database

        api:
            pattern: ^/api
            stateless: true
            anonymous: false
            provider: in-database
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator


        main:
            anonymous: true

            provider: in_database

            form_login: 
                csrf_token_generator: security.csrf.token_manager
                login_path: app_login
                check_path: app_login

            logout:
                path:   app_logout

                # where to redirect after logout
                target: app_login

            # activate different ways to authenticate

            # http_basic: true
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: true
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/api,       roles: ROLE_MEMBER }

    role_hierarchy:
            ROLE_ADMIN: [ROLE_MEMBER, ROLE_ADMIN]
            ROLE_MEMBER: [ROLE_USER, ROLE_MEMBER]
       
        
